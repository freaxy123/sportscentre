# This docker-compose file builds all services using a multistage dockerfile and puts all microservices in production mode
# Also every service has a dedicated database container and Prometheus/Grafana is added for monitoring
version: '3.3'
services:
  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: docker/gateway/Dockerfile-build-run
    ports:
      - 8080:8080
    environment:
      - SPRING_PROFILES_ACTIVE=production
    networks:
      - gateway-network

  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: docker/user-service/Dockerfile-build-run
    ports:
      - 8081:8081
    environment:
      - SPRING_PROFILES_ACTIVE=production
    networks:
      - user-network
      - kafka-network
      - gateway-network
    depends_on:
      - mongo-user
      - kafka-service

  mongo-user:
    container_name: mongo-user
    image: mongo:6.0.2
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: user
    volumes:
      - mongo-user:/data/db
    ports:
      - 27017:27017
    networks:
      - user-network
#    restart: unless-stopped

  workout-service:
    container_name: workout-service
    build:
      context: .
      dockerfile: docker/workout-service/Dockerfile-build-run
    ports:
      - 8082:8082
    environment:
      - SPRING_PROFILES_ACTIVE=production
    networks:
      - workout-network
      - kafka-network
      - gateway-network
    depends_on:
      - mongo-workout
      - kafka-service

  mongo-workout:
    container_name: mongo-workout
    image: mongo:6.0.2
    environment:
      MONGO_INITDB_ROOT_USERNAME: workout
      MONGO_INITDB_ROOT_PASSWORD: workout
    volumes:
      - mongo-workout:/data/db
    ports:
      - 27018:27017
    networks:
      - workout-network
#    restart: unless-stopped

  zookeeper-service:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka-service:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka-service
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-service:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper-service
    networks:
      - kafka-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus-docker.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - gateway-network
      - grafana-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    networks:
      - gateway-network
      - grafana-network

networks:
  user-network:
    driver: bridge
  workout-network:
    driver: bridge
  kafka-network:
    driver: bridge
  gateway-network:
    driver: bridge
  grafana-network:
    driver: bridge

volumes:
  mongo-user:
  mongo-workout: